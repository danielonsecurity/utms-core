from datetime import date, datetime
from decimal import Decimal
from typing import List

import requests
from icalendar import Calendar

from utms.core.events.event import Event, EventConfig
from utms.core.events.manager import EventManager
from utms.utils import python_to_hy


def import_ics_calendar(ics_url: str, event_manager: EventManager) -> None:
    """Import events from ICS calendar."""
    # Fetch and parse calendar
    cal = Calendar.from_ical(requests.get(ics_url).text)

    for component in cal.walk("VEVENT"):
        # Convert to UTC timestamp
        start = component.get("dtstart").dt
        end = component.get("dtend").dt

        # Handle all-day events
        all_day = isinstance(start, date)
        if all_day:
            start = datetime.combine(start, datetime.min.time())
            end = datetime.combine(end, datetime.min.time())

        config = EventConfig(
            label=component.get("uid"),
            name=str(component.get("summary")),
            timerange={"start": Decimal(start.timestamp()), "end": Decimal(end.timestamp())},
            all_day=all_day,
            location=str(component.get("location", "")),
            url=str(component.get("url", "")),
            description=str(component.get("description", "")),
            created=(
                Decimal(component.get("created").dt.timestamp())
                if component.get("created")
                else None
            ),
            modified=(
                Decimal(component.get("last-modified").dt.timestamp())
                if component.get("last-modified")
                else None
            ),
            source=ics_url,
            properties={
                "calendar": str(cal.get("x-wr-calname", "Imported Calendar")),
                "calendar_description": str(cal.get("x-wr-caldesc", "")),
            },
        )

        event = Event(config)
        event_manager.add_event(event)


def event_to_hy(event: Event) -> str:
    """Convert an event to Hy format."""
    lines = [f"(def-event {event._config.label}"]

    # Basic properties
    if event.name:
        lines.append(f"  (name {python_to_hy(event.name)})")
    if event.state:
        lines.append(f"  (state {python_to_hy(event.state)})")
    if event.tags:
        lines.append(f"  (tags {python_to_hy(event.tags)})")

    # Time specifications
    if event._config.schedule:
        lines.append(f"  (schedule {event._config.schedule})")
    if event._config.deadline:
        lines.append(f"  (deadline {event._config.deadline})")
    if event._config.timestamp:
        lines.append(f"  (timestamp {event._config.timestamp})")
    if event._config.timerange:
        lines.append(f"  (timerange {python_to_hy(event._config.timerange)})")

    # Clock entries
    if event._clock_entries:
        clock_entries = python_to_hy([[start, end] for start, end in event._clock_entries])
        lines.append(f"  (clock-entries {clock_entries})")

    # Properties
    properties = event._config.properties.copy()
    if event._config.location:
        properties["location"] = event._config.location
    if event._config.url:
        properties["url"] = event._config.url
    if event._config.description:
        properties["description"] = event._config.description
    if event._config.source:
        properties["source"] = event._config.source

    if properties:
        lines.append(f"  (properties {python_to_hy(properties)})")

    lines.append(")")
    return "\n".join(lines)


def export_events_to_hy(events: List[Event], filename: str) -> None:
    """Export events to a Hy file."""
    content = [
        ";; Generated by UTMS Event Exporter",
        f";; Generated at: {datetime.now().isoformat()}",
        "",
    ]

    for event in events:
        content.append(event_to_hy(event))
        content.append("")  # Empty line between events

    with open(filename, "w") as f:
        f.write("\n".join(content))


manager = EventManager()
url = "https://www.officeholidays.com/ics-local-name/germany"
import_ics_calendar(url, manager)
export_events_to_hy(list(manager.events.values()), "/tmp/holidays.hy")
